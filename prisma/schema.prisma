generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  id_number     String      @unique @db.VarChar(50)
  role          String      @db.VarChar(20)
  phone_number  String      @db.VarChar(20)
  department    String?      @db.VarChar(20)
  gender        String      @db.VarChar(10)
  email         String?       @unique @db.VarChar(100)
  is_active     Boolean     @default(true)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  created_by    String      @db.VarChar(100) 
  Employee      Employees?  // One-to-one relation with Employees
  webAuthnCredentials WebAuthnCredentials[]
  LoginLogs     LoginLogs[] 
  webAuthnCredentialChallenge WebAuthnCredentialChallenge?
  trainerClassAssignments TrainerClassAssignments[]
  classAttendance         ClassAttendance[]
  biometricEnrollments    BiometricEnrollments[]
  biometricLogs           BiometricLogs[]

  @@map("Users")
  @@index([id_number])
}

model Employees {
  id              Int          @id @default(autoincrement())
  employee_id     Int          @unique  // This will come from Users table id
  name            String       @db.VarChar(100)  // For verification
  id_number       String       @db.VarChar(50)   // For verification
  role            String       @db.VarChar(20)   // For verification
  email           String       @unique @db.VarChar(100)
  password        String       @db.VarChar(255)
  date_of_birth   DateTime     @db.Date
  id_card_path    String       @db.VarChar(255)  // Path to stored ID card file
  passport_photo  String       @db.VarChar(255)  // Path to stored passport photo
  created_at      DateTime     @default(now())
  user            Users        @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  Attendance      Attendance[]
  LoginLogs       LoginLogs[]
  PasswordReset   PasswordReset[] 
  DeviceCheckIn   DeviceCheckIn[]  
  LocationHeartbeat  LocationHeartbeat[]

  @@index([id_number, role]) // Index for faster verification lookups
}

model Attendance {
  id             Int       @id @default(autoincrement())
  employee_id    Int       
  date           DateTime  @db.Date
  check_in_time  DateTime?
  check_out_time DateTime?
  sessions       Json?
  status         String    @default("Absent") @db.VarChar(10)
  Employees      Employees @relation(fields: [employee_id], references: [id])

  @@unique([employee_id, date])
}

model PasswordReset {
  id           Int      @id @default(autoincrement())
  employee_id  Int
  token        String   @unique
  expires      DateTime
  used         Boolean  @default(false)
  employee     Employees @relation(fields: [employee_id], references: [id])
  created_at   DateTime @default(now())

  @@map("PasswordReset") 
  @@index([token])
}

model AttendanceProcessingLog {
  id                Int      @id @default(autoincrement())
  date              DateTime
  records_processed Int
  status            String   // 'completed' | 'failed'
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@unique([date])
}

model WebAuthnCredentials {
  id              String   @id @default(uuid())
  userId          Int
  email           String?  @db.VarChar(100)
  user            Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialId    String   @unique
  publicKey       String   @db.Text
  counter         Int
  transports      String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("WebAuthnCredentials")
}

model WebAuthnCredentialChallenge {
  userId    Int       @id
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge String    @db.Text
  expires   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("WebAuthnCredentialChallenge")
}

// Add this model to your existing schema.prisma file

model LoginLogs {
  id               Int       @id @default(autoincrement())
  user_id          Int?      // Links to Users.id - nullable for failed attempts
  employee_id      Int?      // Links to Employees.id - nullable for failed attempts  
  email            String    @db.VarChar(100) // Always store email attempted
  ip_address       String    @db.VarChar(45)  // IPv4/IPv6 support
  user_agent       String    @db.Text         // Browser/device info
  status           String    @db.VarChar(20)  // 'success', 'failed', 'blocked'
  failure_reason   String?   @db.VarChar(100) // Detailed failure reason
  login_method     String    @db.VarChar(20)  // 'password', 'biometric'
  session_duration Int?      // In minutes - for successful logins
  attempted_at     DateTime  @default(now())
  
  // Relations
  user             Users?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  employee         Employees? @relation(fields: [employee_id], references: [id], onDelete: SetNull)
  
  @@map("LoginLogs")
  @@index([user_id])
  @@index([employee_id])
  @@index([email])
  @@index([attempted_at])
  @@index([status])
  @@index([ip_address])
}

// Classes that trainers can be assigned to
model Classes {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)        // e.g., "Advanced Mathematics"
  code            String    @unique @db.VarChar(20)  // e.g., "MATH301"
  description     String?   @db.Text                 // Optional class description
  department      String    @db.VarChar(50)          // Department offering the class
  duration_hours  Int       @default(2)              // Class duration in hours
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String    @db.VarChar(100)
  
  // Relations
  trainerAssignments TrainerClassAssignments[]
  classAttendance    ClassAttendance[]

  @@map("Classes")
  @@index([code])
  @@index([department])
  @@index([is_active])
}

// Separate attendance tracking for classes
model ClassAttendance {
  id                Int       @id @default(autoincrement())
  trainer_id        Int       // References Users.id (employee who is a trainer)
  class_id          Int       // References Classes.id
  date              DateTime  @db.Date
  check_in_time     DateTime
  check_out_time    DateTime? // Will be auto-set after duration_hours
  status            String    @default("Present") @db.VarChar(20)
  auto_checkout     Boolean   @default(false)     // Flag to track if auto-checked out
  work_attendance_id Int?     // Reference to the work attendance record (optional link)
  created_at        DateTime  @default(now())
  
  // Relations
  trainer           Users     @relation(fields: [trainer_id], references: [id], onDelete: Cascade)
  class             Classes   @relation(fields: [class_id], references: [id], onDelete: Cascade)
  
  @@unique([trainer_id, class_id, date])  // One check-in per trainer per class per day
  @@map("ClassAttendance")
  @@index([trainer_id])
  @@index([class_id])
  @@index([date])
  @@index([check_in_time])
  @@index([auto_checkout])
}

// Junction table to assign trainers to classes
model TrainerClassAssignments {
  id          Int       @id @default(autoincrement())
  trainer_id  Int       // References Users.id (where role = 'employee' and assigned to classes)
  class_id    Int       // References Classes.id
  assigned_at DateTime  @default(now())
  is_active   Boolean   @default(true)
  assigned_by String    @db.VarChar(100)  // Who made the assignment
  
  // Relations
  trainer     Users     @relation(fields: [trainer_id], references: [id], onDelete: Cascade)
  class       Classes   @relation(fields: [class_id], references: [id], onDelete: Cascade)
  
  @@unique([trainer_id, class_id])  // A trainer can only be assigned to a class once
  @@map("TrainerClassAssignments")
  @@index([trainer_id])
  @@index([class_id])
  @@index([is_active])
}

// Biometric enrollment tracking for mobile app
model BiometricEnrollments {
  id              Int       @id @default(autoincrement())
  user_id         Int       // References Users.id
  biometric_hash  String    @db.Text  // Hashed biometric data (for security)
  enrolled_at     DateTime  @default(now())
  device_info     Json?     // Store device information
  ip_address      String?   @db.VarChar(45)
  user_agent      String?   @db.Text
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  user            Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("BiometricEnrollments")
  @@index([user_id])
  @@index([user_id, is_active])
}

// Biometric activity logs for security tracking
model BiometricLogs {
  id          Int       @id @default(autoincrement())
  user_id     Int       // References Users.id
  action      String    @db.VarChar(50)  // 'enrollment', 'authentication', 'deletion'
  status      String    @db.VarChar(20)  // 'success', 'failed'
  ip_address  String?   @db.VarChar(45)
  user_agent  String?   @db.Text
  timestamp   DateTime  @default(now())
  details     Json?     // Additional details about the action
  
  // Relations
  user        Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    @@map("BiometricLogs")
  @@index([user_id])
  @@index([timestamp])
  @@index([action])
  @@index([status])
}

model DeviceCheckIn {
  id              Int       @id @default(autoincrement())
  device_hash     String    @db.VarChar(64)
  employee_id     Int
  checked_in_at   DateTime  @default(now())
  ip_address      String?   @db.VarChar(45) 
  user_agent      String?   @db.Text         
  
  // âœ… ADD THIS RELATION (important!)
  employee        Employees @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  
  @@map("DeviceCheckIn")
  @@index([device_hash, checked_in_at])
  @@index([employee_id])
}

model LocationHeartbeat {
  id              Int       @id @default(autoincrement())
  employee_id     Int
  latitude        Float
  longitude       Float
  accuracy        Float
  is_inside_fence Boolean   // Pre-calculated for efficiency
  recorded_at     DateTime  @default(now())
  
  employee        Employees @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  
  @@map("LocationHeartbeat")
  @@index([employee_id, recorded_at])
  @@index([is_inside_fence, recorded_at])
}