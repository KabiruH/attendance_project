generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  id             Int       @id @default(autoincrement())
  employee_id    Int
  date           DateTime  @db.Date
  check_in_time  DateTime?
  check_out_time DateTime?
  sessions       Json?
  status         String    @default("Absent") @db.VarChar(10)
  employees      employees @relation(fields: [employee_id], references: [id], map: "Attendance_employee_id_fkey")

  @@unique([employee_id, date], map: "Attendance_employee_id_date_key")
}

model attendanceprocessinglog {
  id                Int      @id @default(autoincrement())
  date              DateTime @unique(map: "AttendanceProcessingLog_date_key")
  records_processed Int
  status            String
  created_at        DateTime @default(now())
  updated_at        DateTime
}

model biometricenrollments {
  id             Int      @id @default(autoincrement())
  user_id        Int
  biometric_hash String   @db.Text
  enrolled_at    DateTime @default(now())
  device_info    Json?
  ip_address     String?  @db.VarChar(45)
  user_agent     String?  @db.Text
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "BiometricEnrollments_user_id_fkey")

  @@index([user_id], map: "BiometricEnrollments_user_id_idx")
  @@index([user_id, is_active], map: "BiometricEnrollments_user_id_is_active_idx")
}

model biometriclogs {
  id         Int      @id @default(autoincrement())
  user_id    Int
  action     String   @db.VarChar(50)
  status     String   @db.VarChar(20)
  ip_address String?  @db.VarChar(45)
  user_agent String?  @db.Text
  timestamp  DateTime @default(now())
  details    Json?
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "BiometricLogs_user_id_fkey")

  @@index([action], map: "BiometricLogs_action_idx")
  @@index([status], map: "BiometricLogs_status_idx")
  @@index([timestamp], map: "BiometricLogs_timestamp_idx")
  @@index([user_id], map: "BiometricLogs_user_id_idx")
}

model classattendance {
  id                 Int       @id @default(autoincrement())
  trainer_id         Int
  class_id           Int
  date               DateTime  @db.Date
  check_in_time      DateTime
  check_out_time     DateTime?
  status             String    @default("Present") @db.VarChar(20)
  auto_checkout      Boolean   @default(false)
  work_attendance_id Int?
  created_at         DateTime  @default(now())
  classes            classes   @relation(fields: [class_id], references: [id], onDelete: Cascade, map: "ClassAttendance_class_id_fkey")
  users              users     @relation(fields: [trainer_id], references: [id], onDelete: Cascade, map: "ClassAttendance_trainer_id_fkey")

  @@unique([trainer_id, class_id, date], map: "ClassAttendance_trainer_id_class_id_date_key")
  @@index([auto_checkout], map: "ClassAttendance_auto_checkout_idx")
  @@index([check_in_time], map: "ClassAttendance_check_in_time_idx")
  @@index([class_id], map: "ClassAttendance_class_id_idx")
  @@index([date], map: "ClassAttendance_date_idx")
  @@index([trainer_id], map: "ClassAttendance_trainer_id_idx")
}

model classes {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(100)
  code                    String                    @unique(map: "Classes_code_key") @db.VarChar(20)
  description             String?                   @db.Text
  department              String                    @db.VarChar(50)
  duration_hours          Int                       @default(2)
  is_active               Boolean                   @default(true)
  created_at              DateTime                  @default(now())
  updated_at              DateTime
  created_by              String                    @db.VarChar(100)
  classattendance         classattendance[]
  trainerclassassignments trainerclassassignments[]

  @@index([code], map: "Classes_code_idx")
  @@index([department], map: "Classes_department_idx")
  @@index([is_active], map: "Classes_is_active_idx")
}

model employees {
  id             Int             @id @default(autoincrement())
  employee_id    Int             @unique(map: "Employees_employee_id_key")
  name           String          @db.VarChar(100)
  id_number      String          @db.VarChar(50)
  role           String          @db.VarChar(20)
  email          String          @unique(map: "Employees_email_key") @db.VarChar(100)
  password       String          @db.VarChar(255)
  date_of_birth  DateTime        @db.Date
  id_card_path   String          @db.VarChar(255)
  passport_photo String          @db.VarChar(255)
  created_at     DateTime        @default(now())
  attendance     attendance[]
  users          users           @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "Employees_employee_id_fkey")
  loginlogs      loginlogs[]
  passwordreset  passwordreset[]

  @@index([id_number, role], map: "Employees_id_number_role_idx")
}

model loginlogs {
  id               Int        @id @default(autoincrement())
  user_id          Int?
  employee_id      Int?
  email            String     @db.VarChar(100)
  ip_address       String     @db.VarChar(45)
  user_agent       String     @db.Text
  status           String     @db.VarChar(20)
  failure_reason   String?    @db.VarChar(100)
  login_method     String     @db.VarChar(20)
  session_duration Int?
  attempted_at     DateTime   @default(now())
  employees        employees? @relation(fields: [employee_id], references: [id], map: "LoginLogs_employee_id_fkey")
  users            users?     @relation(fields: [user_id], references: [id], map: "LoginLogs_user_id_fkey")

  @@index([attempted_at], map: "LoginLogs_attempted_at_idx")
  @@index([email], map: "LoginLogs_email_idx")
  @@index([employee_id], map: "LoginLogs_employee_id_idx")
  @@index([ip_address], map: "LoginLogs_ip_address_idx")
  @@index([status], map: "LoginLogs_status_idx")
  @@index([user_id], map: "LoginLogs_user_id_idx")
}

model passwordreset {
  id          Int       @id @default(autoincrement())
  employee_id Int
  token       String    @unique(map: "PasswordReset_token_key")
  expires     DateTime
  used        Boolean   @default(false)
  created_at  DateTime  @default(now())
  employees   employees @relation(fields: [employee_id], references: [id], map: "PasswordReset_employee_id_fkey")

  @@index([employee_id], map: "PasswordReset_employee_id_fkey")
  @@index([token], map: "PasswordReset_token_idx")
}

model trainerclassassignments {
  id          Int      @id @default(autoincrement())
  trainer_id  Int
  class_id    Int
  assigned_at DateTime @default(now())
  is_active   Boolean  @default(true)
  assigned_by String   @db.VarChar(100)
  classes     classes  @relation(fields: [class_id], references: [id], onDelete: Cascade, map: "TrainerClassAssignments_class_id_fkey")
  users       users    @relation(fields: [trainer_id], references: [id], onDelete: Cascade, map: "TrainerClassAssignments_trainer_id_fkey")

  @@unique([trainer_id, class_id], map: "TrainerClassAssignments_trainer_id_class_id_key")
  @@index([class_id], map: "TrainerClassAssignments_class_id_idx")
  @@index([is_active], map: "TrainerClassAssignments_is_active_idx")
  @@index([trainer_id], map: "TrainerClassAssignments_trainer_id_idx")
}

model users {
  id                          Int                          @id @default(autoincrement())
  name                        String                       @db.VarChar(100)
  id_number                   String                       @unique(map: "Users_id_number_key") @db.VarChar(50)
  role                        String                       @db.VarChar(20)
  phone_number                String                       @db.VarChar(20)
  department                  String?                      @db.VarChar(20)
  gender                      String                       @db.VarChar(10)
  email                       String?                      @unique(map: "Users_email_key") @db.VarChar(100)
  is_active                   Boolean                      @default(true)
  created_at                  DateTime                     @default(now())
  updated_at                  DateTime
  created_by                  String                       @db.VarChar(100)
  biometricenrollments        biometricenrollments[]
  biometriclogs               biometriclogs[]
  classattendance             classattendance[]
  employees                   employees?
  loginlogs                   loginlogs[]
  trainerclassassignments     trainerclassassignments[]
  webauthncredentialchallenge webauthncredentialchallenge?
  webauthncredentials         webauthncredentials[]

  @@index([id_number], map: "Users_id_number_idx")
}

model webauthncredentialchallenge {
  userId    Int      @id
  challenge String   @db.Text
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "WebAuthnCredentialChallenge_userId_fkey")
}

model webauthncredentials {
  id           String   @id
  userId       Int
  email        String?  @db.VarChar(100)
  credentialId String   @unique(map: "WebAuthnCredentials_credentialId_key")
  publicKey    String   @db.Text
  counter      Int
  transports   String?
  created_at   DateTime @default(now())
  updated_at   DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "WebAuthnCredentials_userId_fkey")

  @@index([userId], map: "WebAuthnCredentials_userId_fkey")
}
