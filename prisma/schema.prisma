generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int         @id @default(autoincrement())
  organization_id Int       // NEW: Link to organization
  name          String      @db.VarChar(100)
  id_number     String      @unique @db.VarChar(50)              
  role          String      @db.VarChar(20)
  phone_number  String      @db.VarChar(20)
  department    String?     @db.VarChar(20)
  gender        String      @db.VarChar(10)
  email         String?     @unique @db.VarChar(100)             
  is_active     Boolean     @default(true)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  created_by    String      @db.VarChar(100) 
  
  // Relations
  organization                Organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  Employee                    Employees?
  webAuthnCredentials         WebAuthnCredentials[]
  LoginLogs                   LoginLogs[] 
  webAuthnCredentialChallenge WebAuthnCredentialChallenge?
  trainerClassAssignments     TrainerClassAssignments[]
  classAttendance             ClassAttendance[]
  biometricEnrollments        BiometricEnrollments[]
  biometricLogs               BiometricLogs[]

  @@unique([organization_id, id_number])  // Unique within organization
  @@unique([organization_id, email])      // Unique within organization (if email exists)
  @@map("Users")
  @@index([organization_id])
  @@index([organization_id, id_number])
  @@index([organization_id, role])
}

model Employees {
  id              Int          @id @default(autoincrement())
  employee_id     Int          @unique
  name            String       @db.VarChar(100)
  id_number       String       @unique @db.VarChar(50)
  role            String       @db.VarChar(20)
  email           String       @db.VarChar(100)  // Remove @unique
  password        String       @db.VarChar(255)
  date_of_birth   DateTime     @db.Date
  id_card_path    String       @db.VarChar(255)
  passport_photo  String       @db.VarChar(255)
  created_at      DateTime     @default(now())
  user            Users        @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  Attendance      Attendance[]
  LoginLogs       LoginLogs[]
  PasswordReset   PasswordReset[] 

  @@index([id_number, role])
}

// NEW: Organizations table for multi-tenancy
model Organizations {
  id                    Int      @id @default(autoincrement())
  name                  String   @db.VarChar(100)               // School/Organization name
  slug                  String   @unique @db.VarChar(50)        // URL-friendly identifier (abc-school)
  domain                String?  @unique @db.VarChar(100)       // Custom domain (abcschool.edu)
  subdomain             String?  @unique @db.VarChar(50)        // Subdomain (abc-school.yourapp.com)
  logo_url              String?  @db.VarChar(255)               // Logo file path/URL
  live_db_url           String?  @db.VarChar(500)               // Live database URL for this organization

  // Parent/Child hierarchy for Optimum Systems
  parent_id             Int?                              // NULL for Optimum Systems, populated for client schools
  organization_type     String   @default("client") @db.VarChar(20) // "parent", "client"

  // Geolocation settings
  center_latitude       Decimal? @db.Decimal(10, 8)            // Center latitude for geofencing
  center_longitude      Decimal? @db.Decimal(11, 8)            // Center longitude for geofencing  
  max_distance_meters   Int?     @default(50)                  // Maximum allowed distance in meters
  geofencing_enabled    Boolean  @default(false)               // Enable/disable geofencing for this org
  
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  created_by            String   @db.VarChar(100)
  
  // Relations - all tables that need tenant isolation
  parent                Organizations? @relation("OrganizationHierarchy", fields: [parent_id], references: [id])
  children              Organizations[] @relation("OrganizationHierarchy")
  users                    Users[]
  classes                  Classes[]
  attendanceProcessingLogs AttendanceProcessingLog[]
  
  @@map("Organizations")
  @@index([slug])
  @@index([domain])
  @@index([subdomain])
  @@index([is_active])
}

model Attendance {
  id             Int       @id @default(autoincrement())
  employee_id    Int       
  date           DateTime  @db.Date
  check_in_time  DateTime?
  check_out_time DateTime?
  sessions       Json?
  status         String    @default("Absent") @db.VarChar(10)
  Employees      Employees @relation(fields: [employee_id], references: [id])

  @@unique([employee_id, date])
}

model PasswordReset {
  id           Int      @id @default(autoincrement())
  employee_id  Int
  token        String   @unique
  expires      DateTime
  used         Boolean  @default(false)
  employee     Employees @relation(fields: [employee_id], references: [id])
  created_at   DateTime @default(now())

  @@map("PasswordReset") 
  @@index([token])
}

model AttendanceProcessingLog {
  id                Int      @id @default(autoincrement())
  organization_id   Int      // ADD THIS
  date              DateTime
  records_processed Int
  status            String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  organization      Organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, date])  // Unique per organization
  @@index([organization_id])
}

model WebAuthnCredentials {
  id              String   @id @default(uuid())
  userId          Int
  email           String?  @db.VarChar(100)
  user            Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialId    String   @unique
  publicKey       String   @db.Text
  counter         Int
  transports      String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("WebAuthnCredentials")
}

model WebAuthnCredentialChallenge {
  userId    Int       @id
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge String    @db.Text
  expires   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("WebAuthnCredentialChallenge")
}

// Add this model to your existing schema.prisma file

model LoginLogs {
  id               Int       @id @default(autoincrement())
  user_id          Int?      // Links to Users.id - nullable for failed attempts
  employee_id      Int?      // Links to Employees.id - nullable for failed attempts  
  email            String    @db.VarChar(100) // Always store email attempted
  ip_address       String    @db.VarChar(45)  // IPv4/IPv6 support
  user_agent       String    @db.Text         // Browser/device info
  status           String    @db.VarChar(20)  // 'success', 'failed', 'blocked'
  failure_reason   String?   @db.VarChar(100) // Detailed failure reason
  login_method     String    @db.VarChar(20)  // 'password', 'biometric'
  session_duration Int?      // In minutes - for successful logins
  attempted_at     DateTime  @default(now())
  
  // Relations
  user             Users?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  employee         Employees? @relation(fields: [employee_id], references: [id], onDelete: SetNull)
  
  @@map("LoginLogs")
  @@index([user_id])
  @@index([employee_id])
  @@index([email])
  @@index([attempted_at])
  @@index([status])
  @@index([ip_address])
}

// Classes that trainers can be assigned to
model Classes {
  id              Int       @id @default(autoincrement())
  organization_id Int       // ADD THIS
  name            String    @db.VarChar(100)
  code            String    @db.VarChar(20)  // Remove @unique
  description     String?   @db.Text
  department      String    @db.VarChar(50)
  duration_hours  Int       @default(2)
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String    @db.VarChar(100)
  
  // Relations
  organization       Organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  trainerAssignments TrainerClassAssignments[]
  classAttendance    ClassAttendance[]

  @@unique([organization_id, code])  // Unique per organization
  @@map("Classes")
  @@index([organization_id])
  @@index([organization_id, department])
  @@index([is_active])
}

// Separate attendance tracking for classes
model ClassAttendance {
  id                Int       @id @default(autoincrement())
  trainer_id        Int       // References Users.id (employee who is a trainer)
  class_id          Int       // References Classes.id
  date              DateTime  @db.Date
  check_in_time     DateTime
  check_out_time    DateTime? // Will be auto-set after duration_hours
  status            String    @default("Present") @db.VarChar(20)
  auto_checkout     Boolean   @default(false)     // Flag to track if auto-checked out
  work_attendance_id Int?     // Reference to the work attendance record (optional link)
  created_at        DateTime  @default(now())
  
  // Relations
  trainer           Users     @relation(fields: [trainer_id], references: [id], onDelete: Cascade)
  class             Classes   @relation(fields: [class_id], references: [id], onDelete: Cascade)
  
  @@unique([trainer_id, class_id, date])  // One check-in per trainer per class per day
  @@map("ClassAttendance")
  @@index([trainer_id])
  @@index([class_id])
  @@index([date])
  @@index([check_in_time])
  @@index([auto_checkout])
}

// Junction table to assign trainers to classes
model TrainerClassAssignments {
  id          Int       @id @default(autoincrement())
  trainer_id  Int       // References Users.id (where role = 'employee' and assigned to classes)
  class_id    Int       // References Classes.id
  assigned_at DateTime  @default(now())
  is_active   Boolean   @default(true)
  assigned_by String    @db.VarChar(100)  // Who made the assignment
  
  // Relations
  trainer     Users     @relation(fields: [trainer_id], references: [id], onDelete: Cascade)
  class       Classes   @relation(fields: [class_id], references: [id], onDelete: Cascade)
  
  @@unique([trainer_id, class_id])  // A trainer can only be assigned to a class once
  @@map("TrainerClassAssignments")
  @@index([trainer_id])
  @@index([class_id])
  @@index([is_active])
}

// Biometric enrollment tracking for mobile app
model BiometricEnrollments {
  id              Int       @id @default(autoincrement())
  user_id         Int       // References Users.id
  biometric_hash  String    @db.Text  // Hashed biometric data (for security)
  enrolled_at     DateTime  @default(now())
  device_info     Json?     // Store device information
  ip_address      String?   @db.VarChar(45)
  user_agent      String?   @db.Text
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  user            Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("BiometricEnrollments")
  @@index([user_id])
  @@index([user_id, is_active])
}

// Biometric activity logs for security tracking
model BiometricLogs {
  id          Int       @id @default(autoincrement())
  user_id     Int       // References Users.id
  action      String    @db.VarChar(50)  // 'enrollment', 'authentication', 'deletion'
  status      String    @db.VarChar(20)  // 'success', 'failed'
  ip_address  String?   @db.VarChar(45)
  user_agent  String?   @db.Text
  timestamp   DateTime  @default(now())
  details     Json?     // Additional details about the action
  
  // Relations
  user        Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    @@map("BiometricLogs")
  @@index([user_id])
  @@index([timestamp])
  @@index([action])
  @@index([status])
}